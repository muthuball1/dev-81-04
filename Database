package application;

import java.sql.*;
import java.time.LocalDate;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class Database {
	private static final String DATABASE_URL = "jdbc:sqlite:test.db";

    public static void main(String[] args) {
        createDatabase();
    }
    
    public static void createDatabase() {
        try {
            Class.forName("org.sqlite.JDBC");
            
            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 Statement stmt = connection.createStatement()) {

                String sql = "CREATE TABLE IF NOT EXISTS Accounts ( " +
                        "ID INTEGER PRIMARY KEY AUTOINCREMENT, " +
                        "AccountName TEXT NOT NULL, " +
                        "OpeningDate TEXT NOT NULL, " +
                        "OpeningBalance REAL NOT NULL);";

                stmt.executeUpdate(sql);
                System.out.println("Table created successfully");
            }
        } catch (ClassNotFoundException e) {
            System.err.println("SQLite JDBC Driver not found.");
        } catch (SQLException e) {
            System.err.println("SQL Exception: " + e.getMessage());
        }
    }
    
    public static void addAccount(Account account) {
        String sql = "INSERT INTO Accounts(AccountName, OpeningDate, OpeningBalance) VALUES(?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, account.getAccountName());
            pstmt.setString(2, account.getOpeningDate().toString());
            pstmt.setDouble(3, account.getOpeningBalance());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static ObservableList<Account> getAllAccounts() {
        ObservableList<Account> accounts = FXCollections.observableArrayList();
        String sql = "SELECT AccountName, OpeningDate, OpeningBalance FROM Accounts ORDER BY OpeningDate DESC";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                String name = rs.getString("AccountName");
                LocalDate date = LocalDate.parse(rs.getString("OpeningDate"));
                double balance = rs.getDouble("OpeningBalance");

                accounts.add(new Account(name, date, balance));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return accounts;
    }
    // Method to save a transaction to the database
    public static boolean saveTransaction(String accountName, String transactionType, LocalDate date, 
                                          String description, double paymentAmount, double depositAmount) {
        String sql = "INSERT INTO Transactions(AccountName, TransactionType, TransactionDate, Description, PaymentAmount, DepositAmount) " +
                     "VALUES(?, ?, ?, ?, ?, ?)";

        try (Connection conn = DriverManager.getConnection(DATABASE_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, accountName);
            pstmt.setString(2, transactionType);
            pstmt.setString(3, date.toString());
            pstmt.setString(4, description);
            pstmt.setDouble(5, paymentAmount);
            pstmt.setDouble(6, depositAmount);
            pstmt.executeUpdate();
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}
